{"version":3,"file":"static/js/707.7bfdb446.chunk.js","mappings":"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","sources":["components/StyledBody.js","components/TitleDivisionLine.js","pages/main/TemperatureHumidityPage.js"],"sourcesContent":["import styled from 'styled-components';\r\n\r\nconst BodyBody = styled.body`\r\n    color: black;\r\n    background-color: #ffffff;\r\n    font-size: 20px;\r\n    margin-top: 2rem;\r\n    margin-left: 1.5rem;\r\n    margin-right: 1.5rem;\r\n    padding-bottom: 1rem;\r\n`;\r\n\r\nexport default function StyledBody({ children }) {\r\n    return (\r\n        <>\r\n            <BodyBody>{children}</BodyBody>\r\n        </>\r\n    );\r\n}\r\n","import styled from 'styled-components';\r\n\r\nconst Division = styled.div`\r\n  border-top: 0.2rem solid #90c8ac;\r\n`;\r\n\r\nexport default function TitleDivisionLine() {\r\n  return (\r\n    <>\r\n      <Division></Division>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport StyledHeader from '../../components/StyledHeader';\r\nimport StyledBody from '../../components/StyledBody';\r\nimport { Line } from 'react-chartjs-2';\r\nimport Chart from 'chart.js/auto';\r\nimport { useLocation } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport TitleDivisionLine from '../../components/TitleDivisionLine';\r\n\r\nconst FlexRow = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n`;\r\n\r\nconst baseUrl = process.env.REACT_APP_BASE_URL;\r\n\r\nconst options = {\r\n    legend: {\r\n        display: true,\r\n    },\r\n    scales: {\r\n        yAxes: [\r\n            {\r\n                ticks: {\r\n                    min: 0,\r\n                    stepSize: 0.5,\r\n                },\r\n            },\r\n        ],\r\n    },\r\n    maintainAspectRatio: false,\r\n};\r\n\r\nconst calculateDaysSince = (startDate) => {\r\n    const oneDay = 24 * 60 * 60 * 1000;\r\n    const currentDate = new Date();\r\n    const daysDiff = Math.round((currentDate - new Date(startDate)) / oneDay);\r\n    return daysDiff;\r\n};\r\n\r\nconst formatDate = (dateString) => {\r\n    const date = new Date(dateString);\r\n    const month = date.getMonth() + 1;\r\n    const day = date.getDate();\r\n    return `${month}.${day}`;\r\n};\r\n\r\nconst TemperaturHumidityPage = () => {\r\n    const location = useLocation();\r\n    const crop = location.state.crop;\r\n\r\n    const [sensorData, setSensorData] = useState([]);\r\n    const [startDate, setStartDate] = useState('');\r\n    const [endDate, setEndDate] = useState('');\r\n    const [chartData, setChartData] = useState(null);\r\n    const [weeklyChartData, setWeeklyChartData] = useState(null);\r\n    const [selectedChart, setSelectedChart] = useState('daily');\r\n\r\n    useEffect(() => {\r\n        fetchLogs();\r\n    }, []);\r\n\r\n    const fetchLogs = () => {\r\n        axios\r\n            .get(`${baseUrl}/cropLogs/${crop.cropNo}`, {\r\n                withCredentials: true,\r\n            })\r\n            .then((res) => {\r\n                setSensorData(res.data);\r\n\r\n                const firstDate = res.data[0].sensorTime;\r\n                const lastDate = res.data[res.data.length - 1].sensorTime;\r\n                setStartDate(firstDate);\r\n                setEndDate(lastDate);\r\n\r\n                prepareChartData(res.data);\r\n                prepareWeeklyChartData(res.data);\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n            });\r\n    };\r\n\r\n    const prepareChartData = (sensorData) => {\r\n        const humidityData = [];\r\n        const lumenData = [];\r\n        const solidHumidData = [];\r\n        const thomerData = [];\r\n        const timeLabels = [];\r\n\r\n        sensorData.forEach((entry) => {\r\n            humidityData.push(entry.humidity);\r\n            lumenData.push(entry.lumen);\r\n            solidHumidData.push(entry.soilHumid);\r\n            thomerData.push(entry.thomer);\r\n            timeLabels.push(formatDate(entry.sensorTime));\r\n        });\r\n\r\n        const chartData = {\r\n            labels: timeLabels,\r\n            datasets: [\r\n                {\r\n                    label: '습도',\r\n                    data: humidityData,\r\n                    borderColor: '#F5F0BB',\r\n                    backgroundColor: '#F5F0BB',\r\n                },\r\n                {\r\n                    label: '조도',\r\n                    data: lumenData,\r\n                    borderColor: '#C4DFAA',\r\n                    backgroundColor: '#C4DFAA',\r\n                },\r\n                {\r\n                    label: '토양 습도',\r\n                    data: solidHumidData,\r\n                    borderColor: '#90C8AC',\r\n                    backgroundColor: '#90C8AC',\r\n                },\r\n                {\r\n                    label: '온도',\r\n                    data: thomerData,\r\n                    borderColor: '#73A9AD',\r\n                    backgroundColor: '#73A9AD',\r\n                },\r\n            ],\r\n        };\r\n\r\n        setChartData(chartData);\r\n    };\r\n\r\n    const prepareWeeklyChartData = (sensorData) => {\r\n        const weeklyData = [];\r\n        const timeLabels = [];\r\n\r\n        for (let i = 0; i < sensorData.length; i += 7) {\r\n            const weeklyChunk = sensorData.slice(i, i + 7);\r\n            const humiditySum = weeklyChunk.reduce(\r\n                (acc, entry) => acc + entry.humidity,\r\n                0,\r\n            );\r\n            const lumenSum = weeklyChunk.reduce(\r\n                (acc, entry) => acc + entry.lumen,\r\n                0,\r\n            );\r\n            const solidHumidSum = weeklyChunk.reduce(\r\n                (acc, entry) => acc + entry.soilHumid,\r\n                0,\r\n            );\r\n            const thomerSum = weeklyChunk.reduce(\r\n                (acc, entry) => acc + entry.thomer,\r\n                0,\r\n            );\r\n\r\n            const weeklyAverage = {\r\n                humidity: humiditySum / weeklyChunk.length,\r\n                lumen: lumenSum / weeklyChunk.length,\r\n                solidHumid: solidHumidSum / weeklyChunk.length,\r\n                thomer: thomerSum / weeklyChunk.length,\r\n            };\r\n\r\n            weeklyData.push(weeklyAverage);\r\n            const startDate = formatDate(weeklyChunk[0].sensorTime);\r\n            const endDate = formatDate(\r\n                weeklyChunk[weeklyChunk.length - 1].sensorTime,\r\n            );\r\n            timeLabels.push(`${startDate} ~ ${endDate}`);\r\n        }\r\n\r\n        const chartData = {\r\n            labels: timeLabels,\r\n            datasets: [\r\n                {\r\n                    label: '습도',\r\n                    data: weeklyData.map((entry) => entry.humidity),\r\n                    borderColor: '#F5F0BB',\r\n                    backgroundColor: '#F5F0BB',\r\n                },\r\n                {\r\n                    label: '조도',\r\n                    data: weeklyData.map((entry) => entry.lumen),\r\n                    borderColor: '#C4DFAA',\r\n                    backgroundColor: '#C4DFAA',\r\n                },\r\n                {\r\n                    label: '토양 습도',\r\n                    data: weeklyData.map((entry) => entry.solidHumid),\r\n                    borderColor: '#90C8AC',\r\n                    backgroundColor: '#90C8AC',\r\n                },\r\n                {\r\n                    label: '온도',\r\n                    data: weeklyData.map((entry) => entry.thomer),\r\n                    borderColor: '#73A9AD',\r\n                    backgroundColor: '#73A9AD',\r\n                },\r\n            ],\r\n        };\r\n\r\n        setWeeklyChartData(chartData);\r\n    };\r\n\r\n    const handleChartToggle = (chartType) => {\r\n        setSelectedChart(chartType);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <StyledHeader>\r\n                <div className=\"flex justify-between items-center\">\r\n                    <div>\r\n                        <span className=\"text-2xl font-black\">\r\n                            {crop.cropNickname}\r\n                        </span>\r\n                        는 지금?\r\n                    </div>\r\n                    <div className=\"text-sm pt-2\">\r\n                        함께한지 {calculateDaysSince(crop.createdDate)} 일째\r\n                    </div>\r\n                </div>\r\n            </StyledHeader>\r\n            <TitleDivisionLine />\r\n            <StyledBody>\r\n                <div\r\n                    className=\"flex justify-end\"\r\n                    style={{ paddingBottom: '1rem' }}\r\n                >\r\n                    <button\r\n                        className={`flex-none rounded-lg ${\r\n                            selectedChart === 'daily'\r\n                                ? 'bg-[#C4DFAA]'\r\n                                : 'bg-[#C4C4C4]'\r\n                        } px-3.5 py-2.5 text-sm font-semibold text-black shadow-sm hover:bg-[#C4DFAA] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-500 mt-2 mr-3`}\r\n                        onClick={() => handleChartToggle('daily')}\r\n                    >\r\n                        일간\r\n                    </button>\r\n                    <button\r\n                        className={`flex-none rounded-lg ${\r\n                            selectedChart === 'weekly'\r\n                                ? 'bg-[#C4DFAA]'\r\n                                : 'bg-[#C4C4C4]'\r\n                        } px-3.5 py-2.5 text-sm font-semibold text-black shadow-sm hover:bg-[#C4DFAA] focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-500 mt-2 mr-3`}\r\n                        onClick={() => handleChartToggle('weekly')}\r\n                    >\r\n                        주간\r\n                    </button>\r\n                </div>\r\n\r\n                <div\r\n                    style={{\r\n                        backgroundColor: '#FFFFF0',\r\n                        height: '100%',\r\n                    }}\r\n                >\r\n                    <div>\r\n                        <FlexRow\r\n                            style={{\r\n                                marginBottom: '2rem',\r\n                                paddingTop: '1rem',\r\n                            }}\r\n                        >\r\n                            <span\r\n                                className={`text-sm pl-3 pr-3 ${\r\n                                    selectedChart === 'daily'\r\n                                        ? 'font-black'\r\n                                        : ''\r\n                                }`}\r\n                            >\r\n                                일간\r\n                            </span>\r\n                            <span\r\n                                className={`text-sm pr-3 ${\r\n                                    selectedChart === 'weekly'\r\n                                        ? 'font-black'\r\n                                        : ''\r\n                                }`}\r\n                            >\r\n                                주간\r\n                            </span>\r\n                        </FlexRow>\r\n\r\n                        <FlexRow\r\n                            style={{\r\n                                justifyContent: 'space-evenly',\r\n                                marginBottom: '1rem',\r\n                            }}\r\n                        >\r\n                            <FlexRow style={{ margin: '0.5rem 0' }}>\r\n                                <span className=\"text-sm mr-1\">\r\n                                    {formatDate(startDate)} ~{' '}\r\n                                    {formatDate(endDate)}\r\n                                </span>\r\n                            </FlexRow>\r\n                        </FlexRow>\r\n\r\n                        {/* Original chart */}\r\n                        <div\r\n                            style={{\r\n                                display:\r\n                                    selectedChart === 'daily'\r\n                                        ? 'block'\r\n                                        : 'none',\r\n                                width: '100%',\r\n                                height: '20rem',\r\n                            }}\r\n                        >\r\n                            {chartData && (\r\n                                <Line data={chartData} options={options} />\r\n                            )}\r\n                        </div>\r\n\r\n                        {/* Weekly chart */}\r\n                        <div\r\n                            style={{\r\n                                display:\r\n                                    selectedChart === 'weekly'\r\n                                        ? 'block'\r\n                                        : 'none',\r\n                                width: '100%',\r\n                                height: '20rem',\r\n                            }}\r\n                        >\r\n                            {weeklyChartData && (\r\n                                <Line\r\n                                    data={weeklyChartData}\r\n                                    options={options}\r\n                                />\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </StyledBody>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TemperaturHumidityPage;\r\n"],"names":["BodyBody","styled","body","_templateObject","_taggedTemplateLiteral","StyledBody","_ref","children","_jsx","_Fragment","Division","div","TitleDivisionLine","FlexRow","options","legend","display","scales","yAxes","ticks","min","stepSize","maintainAspectRatio","calculateDaysSince","startDate","currentDate","Date","Math","round","formatDate","dateString","date","month","getMonth","day","getDate","concat","TemperaturHumidityPage","crop","useLocation","state","sensorData","setSensorData","useState","setStartDate","endDate","setEndDate","chartData","setChartData","weeklyChartData","setWeeklyChartData","selectedChart","setSelectedChart","useEffect","fetchLogs","axios","get","process","cropNo","withCredentials","then","res","data","firstDate","sensorTime","lastDate","length","prepareChartData","prepareWeeklyChartData","catch","error","console","log","humidityData","lumenData","solidHumidData","thomerData","timeLabels","forEach","entry","push","humidity","lumen","soilHumid","thomer","labels","datasets","label","borderColor","backgroundColor","weeklyData","i","weeklyChunk","slice","humiditySum","reduce","acc","lumenSum","solidHumidSum","thomerSum","weeklyAverage","solidHumid","map","handleChartToggle","chartType","_jsxs","StyledHeader","className","cropNickname","createdDate","style","paddingBottom","onClick","height","marginBottom","paddingTop","justifyContent","margin","width","Line"],"sourceRoot":""}